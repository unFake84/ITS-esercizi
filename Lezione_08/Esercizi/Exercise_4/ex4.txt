University Management System

Create a system to manage a university with departments, courses, professors, and students.
In this exercise, you may encounter situations where type annotations refer to classes that are
defined later in the code (known as forward references).
Therefore, we recommend adding the following import at the first line of your file to enable support for
forward references in type annotations:

from __future__ import annotations

[1]
Create an abstract class Person:
Attributes:

    name
    age

Methods:

    get_role, an abstract method to be implemented by subclasses.
    __str__, method to return a string representation of the person.

[2]
Create subclasses Student and Professor that inherit from Person and implement the abstract method.

Class Student:
Additional attributes:

        student_id,
        courses (list of Course instances).

Additional method:

        enroll, to enroll the student in a course.

[3]
Class Professor:
Additional attributes:

        professor_id,
        department (a Department instance), 
        courses (list of Course instances)

Additional method:

        assign_to_course, to assign the professor to a course.
        set_department, to assign the professor to the department.

[4]
Create a class Course:
Attributes:

    course_name
    course_code
    students (list of Student instances)
    professor (Professor instance)

Methods:

    add_student, to add a student to the course.
    set_professor, to set the professor for the course.
    __str__, method to return a string representation of the course.

[5]
Create a class Department:

Attributes:

    department_name
    courses (list of Course instances)
    professors (list of Professor instances)

Methods:

    add_course, to add a course to the department.
    add_professor, to add a professor to the department.
    __str__, method to return a string representation of the department.

[6]
Create a class University:

Attributes:

    name
    departments (list of Department instances)
    students (list of Student instances)

Methods:

    add_department, to add a department to the university.
    add_student, to add a student to the university.
    __str__, method to return a string representation of the university.

[7]
Finally, write a simple driver program.
After creating a University, you should begin by creating instances of the main components that
make up a university:

    Departments (e.g., Computer Science, Literature)

    Courses (e.g., Data Structures, Medieval Literature)

    Professors (e.g., faculty members who will teach the courses)

    Students (e.g., individuals who will enroll in the courses)

Once these instances are created, follow these steps:

    Add all entities to the university: Ensure the university class can register departments and students. 

    Enroll students in courses: Simulate student registration by assigning students to one or more courses. 

    Assign professors to courses: Each course should have a professor responsible for teaching it. 

    Display the state of the university:
    at each significant step, print out a summary of the university’s current state. This might include:
        A list of courses with assigned professors.
        Which students are enrolled in which courses.
        A breakdown of departments and the courses they offer.

UML:
                ┌───────────────────────┐
                │     Person (ABC)      │
                │-----------------------│
                │ - name: str           │
                │ - age: int            │
                │-----------------------│
                │ + get_role(): str (*) │
                │ + __str__(): str      │
                └───────────▲───────────┘
                            │
            ┌───────────────┴───────────────┐
            │                               │
┌───────────────────────┐         ┌───────────────────────┐
│        Student        │         │       Professor       │
│-----------------------│         │-----------------------│
│ - student_id: str     │         │ - professor_id: str   │
│ - courses: list       │         │ - courses: list       │
│-----------------------│         │ - department: Dept    │
│ + get_role(): str     │         │-----------------------│
│ + enroll(c: Course)   │         │ + get_role(): str     │
└───────────▲───────────┘         │ + assign_to_course(c) │
            │ (0..*)              │ + set_department(d)   │
            │                     └────────────▲──────────┘
            │                                  │ (0..*)
            ▼                                  ▼ (1)
┌───────────────────────┐         ┌───────────────────────┐
│        Course         │         │      Department       │
│-----------------------│         │-----------------------│
│ - course_id: str      │         │ - name: str           │
│ - name: str           │         │ - professors: list    │
│ - students: list      │         │ - courses: list       │
│ - professor: Prof     │         │-----------------------│
│-----------------------│         │ + add_professor(p)    │
│ + add_student(s)      │         │ + add_course(c)       │
│ + set_professor(p)    │         └────────────▲──────────┘
└─────────▲─────────────┘                      │ (0..*)
          │                                    │
          │ (1 ↔ 0..*)  (assegnabile sia da Course sia da Professor)
          ▼                                    │
┌───────────────────────┐                      │
│      University       │                      │
│-----------------------│                      │
│ - name: str           │ (1..*)               │
│ - departments: list   │──────────────────────┘
│ - students: list      │
│-----------------------│
│ + add_department(d)   │
│ + add_student(s)      │
└───────────────────────┘

Corelazioni:

Student ↔ Course:           0..*    ↔   0..*        (molti studenti seguono molti corsi)

Professor ↔ Course:         1       ↔   0..*        (ogni corso ha 1 professore, un professore può insegnare più corsi, assegnabile da entrambi)

Professor ↔ Department:     0..*    ↔   1           (più professori in un dipartimento, ogni professore ha al massimo un dipartimento)

Department ↔ Course:        1       ↔   0..*        (ogni corso appartiene a un dipartimento, un dipartimento può avere più corsi)

University ↔ Department:    1..*    ↔   0..*        (l’università ha più dipartimenti)

University ↔ Student:       0..*    ↔   0..*        (l’università registra molti studenti)